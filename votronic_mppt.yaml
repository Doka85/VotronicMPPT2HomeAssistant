esphome:
  name: votronic-mppt
  friendly_name: votronic_mppt

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: "YOUR_KEY"

ota:
  - platform: esphome
    password: "YOUR_PASSWORD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

time:
  - platform: homeassistant
    id: esptime

captive_portal:

uart:
  id: uart_votronic
  rx_pin: GPIO17
  baud_rate: 1000

globals:
  - id: votronic_buffer
    type: std::vector<uint8_t>
    initial_value: 'std::vector<uint8_t>()'

sensor:
  - platform: template
    name: "Votronic MPPT Batteriespannung"
    id: batt_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2

  - platform: template
    name: "Votronic MPPT Solarspannung"
    id: solar_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2

  - platform: template
    name: "Votronic MPPT Solarstrom"
    id: solar_current
    unit_of_measurement: "A"
    accuracy_decimals: 1

  - platform: integration
    name: "Votronic MPPT Solarertrag Ah"
    sensor: solar_current
    time_unit: h
    unit_of_measurement: "Ah"
    accuracy_decimals: 2
    restore: true

  - platform: total_daily_energy
    name: "Votronic MPPT Solarleistung"
    id: solar_power_calc
    unit_of_measurement: "W"
    accuracy_decimals: 1
    lambda: |-
      return id(solar_current).state * id(solar_voltage).state;
    update_interval: 10s
    device_class: power
    state_class: measurement


  - platform: integration
    name: "Votronic MPPT Solarertrag Wh"
    sensor: solar_power
    time_unit: h
    unit_of_measurement: "Wh"
    accuracy_decimals: 1
    id: solar_energy_wh
    restore: true
 
  - platform: total_daily_energy
    name: "Votronic MPPT Solarenergie (Wh)"
    power_id: solar_power
    unit_of_measurement: "Wh"
    accuracy_decimals: 1
    restore: true
    filters:
      - multiply: 1.0
    state_class: total_increasing
    device_class: energy


binary_sensor:
  - platform: template
    name: "Votronic MPPT Daten aktiv"
    id: votronic_data_active
    lambda: |-
      return true;  // initial immer true, wird bei ausbleibender Aktualisierung auf false gesetzt
    internal: true

interval:
  - interval: 1s
    then:
      lambda: |-
        static unsigned long last_valid_packet = millis();

        uint8_t byte;
        while (id(uart_votronic).read_byte(&byte)) {
          ESP_LOGV("votronic", "Byte empfangen: 0x%02X", byte);

          if (byte == 0x00) {
            ESP_LOGD("votronic", "Leeres Byte empfangen (0x00)");
          }

          if (id(votronic_buffer).size() == 0 && byte != 0xAA) {
            continue;
          }

          id(votronic_buffer).push_back(byte);

          if (id(votronic_buffer).size() == 16) {
            uint8_t checksum = 0;
            for (int i = 1; i < 15; i++) checksum ^= id(votronic_buffer)[i];

            if (checksum == id(votronic_buffer)[15]) {
              uint16_t vb_raw = id(votronic_buffer)[3] << 8 | id(votronic_buffer)[2];
              uint16_t vs_raw = id(votronic_buffer)[5] << 8 | id(votronic_buffer)[4];
              int16_t is_raw = (int16_t)(id(votronic_buffer)[7] << 8 | id(votronic_buffer)[6]);

              if (vb_raw == 0 && vs_raw == 0 && is_raw == 0) {
                ESP_LOGI("votronic", "Leeres Datenpaket – keine aktiven Werte.");
              } else {
                float vb = vb_raw * 0.01;
                float vs = vs_raw * 0.01;
                float is = is_raw * 0.1;

                ESP_LOGI("votronic", "Batt: %.2f V, Solar: %.2f V, Strom: %.2f A", vb, vs, is);

                id(batt_voltage).publish_state(vb);
                id(solar_voltage).publish_state(vs);
                id(solar_current).publish_state(is);

                id(votronic_data_active).publish_state(true);
                last_valid_packet = millis();
              }
            } else {
              ESP_LOGW("votronic", "Ungültige Checksumme – Paket verworfen.");
            }

            id(votronic_buffer).clear();
          } else if (id(votronic_buffer).size() > 16) {
            ESP_LOGW("votronic", "Zu langes Paket – Buffer wird geleert");
            id(votronic_buffer).clear();
          }
        }

        if (millis() - last_valid_packet > 10000) {
          id(votronic_data_active).publish_state(false);
        }
